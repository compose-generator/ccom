# Publish Compiler binaries

name: Release - Cross compilation

on:
  push:
    tags:
      - '*'

jobs:
  build-compiler:
    name: Build compiler binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch_name:
          - linux-arm64
          - linux-armv5
          #- linux-armv6
          - linux-armv7
          - linux-x86
          - linux-x64
          - windows-static-x86
          - windows-static-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Prepare builder
        run: |
          docker run --rm dockcross/${{ matrix.arch_name }} > ./dockcross
          chmod +x dockcross
          mkdir bin
      
      - name: Configure
        run: ./dockcross cmake -Bbin -H./compiler/cpp -GNinja

      - name: Compile
        run: ./dockcross ninja -Cbin

      - name: Process build output - Linux
        if: ${{ startsWith(matrix.arch_name, 'linux') }}
        working-directory: bin
        run: |
          mv compiler ccomc
          chmod +x ccomc
          
      - name: Process build output - Windows
        if: ${{ startsWith(matrix.arch_name, 'windows') }}
        working-directory: bin
        run: mv compiler.exe ccomc.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ccomc-${{ matrix.arch_name }}
          path: ./bin/ccomc**

  build-cli:
    name: Build cli binaries
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-compiler
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Cache Go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PACKAGE_SIGNING }}
          passphrase: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}

      - name: Download all artifacts of compiler build
        uses: actions/download-artifact@v2
        with:
          path: bin

      - name: Prepare compiler binaries
        working-directory: bin
        run: |
          mv ccomc-linux-x86 ccomc-linux-386
          mv ccomc-linux-x64 ccomc-linux-amd64
          mv ccomc-windows-static-x86 ccomc-windows-386
          mv ccomc-windows-static-x64 ccomc-windows-amd64

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v0.165.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          NFPM_PUBLISH_DEB_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}
          NFPM_PUBLISH_RPM_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}
          NFPM_PUBLISH_APK_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1
        env:
          JF_ARTIFACTORY_1: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Deploy to Alpine repository
        run: |
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.13/main/x86_64/ccom_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.12/main/x86_64/ccom_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.11/main/x86_64/ccom_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.10/main/x86_64/ccom_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.13/main/aarch64/ccom_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.12/main/aarch64/ccom_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.11/main/aarch64/ccom_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.10/main/aarch64/ccom_${{ steps.get_version.outputs.version }}_arm64.apk
      
      - name: Deploy to Debian repository
        run: |
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/amd64
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/arm64
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_armv5.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv5
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_armv7.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv7
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_386.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/i386
      
      - name: Deploy to RPM repository
        run: |
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_amd64.rpm" rpm/x86_64/stable/ccom/${{ steps.get_version.outputs.version }}/ccom_${{ steps.get_version.outputs.version }}_amd64.rpm
          jfrog rt u "dist/ccom_${{ steps.get_version.outputs.version }}_linux_arm64.rpm" rpm/aarch64/stable/ccom/${{ steps.get_version.outputs.version }}/ccom_${{ steps.get_version.outputs.version }}_arm64.rpm