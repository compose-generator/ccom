{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":"python","separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"contributing/","text":"Contributing \u00b6 Compose Generator is a community-driven project. This means that we are open for feature requests or suggestions for improvement. Apart from that, feel free to fork this project and send us some code contributions via pull requests. In every case please read the Code of Conduct before contributing. Security issues \u00b6 Please do not open issues regarding security on GitHub! Please read our Security Policy and contact us via non-public ways, e.g. per mail: contact@chillibits.com . Feature request and bugs \u00b6 If you want to contribute by reporting a bug (except a security issue) or you want to send in a feature request, please navigate to the issues section . Issues that are easy to work on are marked and appropriate for beginners are marked as 'good first issue'. Feel free to claim one of those issues by commenting that you want to do so. After we assign you to the issue, you can start working on the problem / feature request. Please open a pull request when you're done with the work and please only work on one issue at once.","title":"Contributing"},{"location":"contributing/#contributing","text":"Compose Generator is a community-driven project. This means that we are open for feature requests or suggestions for improvement. Apart from that, feel free to fork this project and send us some code contributions via pull requests. In every case please read the Code of Conduct before contributing.","title":"Contributing"},{"location":"contributing/#security-issues","text":"Please do not open issues regarding security on GitHub! Please read our Security Policy and contact us via non-public ways, e.g. per mail: contact@chillibits.com .","title":"Security issues"},{"location":"contributing/#feature-request-and-bugs","text":"If you want to contribute by reporting a bug (except a security issue) or you want to send in a feature request, please navigate to the issues section . Issues that are easy to work on are marked and appropriate for beginners are marked as 'good first issue'. Feel free to claim one of those issues by commenting that you want to do so. After we assign you to the issue, you can start working on the problem / feature request. Please open a pull request when you're done with the work and please only work on one issue at once.","title":"Feature request and bugs"},{"location":"intro/","text":"Introduction \u00b6 CCom is a language that allows you to define conditional sections in common data formats, which do not allow logic by default. It acts like a pre-processor and can evaluate your conditional expressions, based on a JSON data object that you can pass to CCom alongside an input file. In order to get started, visit our usage guide .","title":"Introduction"},{"location":"intro/#introduction","text":"CCom is a language that allows you to define conditional sections in common data formats, which do not allow logic by default. It acts like a pre-processor and can evaluate your conditional expressions, based on a JSON data object that you can pass to CCom alongside an input file. In order to get started, visit our usage guide .","title":"Introduction"},{"location":"usage/","text":"General usage \u00b6 In general, you call the cli like so: ccom [options] <input> For example a call could look like this: ccom --data ./data-file.json --out-file ./output-file.yml ./input-file.yml For customization, you have following cli options: Option Shortcut Description Default --benchmark <number> -b <no> Execute compiler benchmarks. n is the number of benchmark runs 0 --compiler <name> (temporarily unavailable) -c <name> Can be used to switch the compiler backend. Valid inputs are cpp and java \"cpp\" --data <data> -d <data> JSON string or path to JSON file, which holds the evaluation work data {} --lang <lang> -l <lang> File format / programming language (e.g. yaml , java , html , ...) \"auto\"* --mode-single -m Set input mode to single statement list - --out-file <path> -o <path> Path to output file. If you omit this flag, the output will be printed to the console - --silent -s Only print raw compiler output and no debug output - --force -f Ignore safety checks. Warning: This could cause demage - --line-comment-iden <string> -lci <string> Specifies the line comment char(s) of your data format \"#\" --block-comment-iden-open <string> -bcio <string> Specifies the opening block comment char(s) of your data format \"\" --block-comment-iden-close <string> -bcic <string> Specifies the closing block comment char(s) of your data format \"\" File mode vs single mode \u00b6 CCom supports two modes of usage: The input file / string with conditional sections to an output file / string The single mode, which can evaluate a single statement list to a boolean Here is an example for an input file, in this case a YAML file: build : ${{SPRING_MAVEN_SOURCE_DIRECTORY}} restart : always networks : #? if service.frontend[1].preselected == false { # - frontend-backend #? } ports : - ${{SPRING_MAVEN_PORT}}:8080 env_file : #? if service.frontend[0] contains name != \"spring-maven\" { # - environment.env #? } Here is an example for an input for a single statement list: has this.is.a.test.key | this.is contains a.test.key == \"value\" | this.is.test >= 42 The cli defaults the mode to the input file, however you can switch to single mode by using the --mode-single or -m flag for the cli. Data path vs data string \u00b6 CCom accepts data in the JSON format only, but you can give it to the cli in one of two different forms: - Data file: If you have the json input data in form of a file, you can set --data / -d to the relative or absolute path to the data file. CCom will then load the file from this path. - Data string: If you do not have the data in form of a file, you might want CCom to consume a string. For that you can set --data / -d to a JSON string (e.g.: {\"test-attribute\": \"test-value\"} ) Language \u00b6 As CCom does not know the content type of your input file, you sometimes have to specify the files language or the comment identifiers. CCom is smart enough to recognize the language for some file extensions, but if the file contents does not match the extension, you can set the language manually via --lang / -l . This should work out for following languages: Language Language Language Language Language Assembly C C++ Dart Dockerfile Elexir Go Groovy Haskell HTML Java JavaScript Julia Kotlin Lua Pascal Perl PHP Powershell Python R Ruby Rust Spice SQL Swift TypeScript XML YAML more to come ... If you did not find your language in the list, you can set the comment identifiers by hand. Here is an example: ccom --data ./test-data.json --line-comment-iden \"//\" --block-comment-iden-open \"/*\" --block-comment-iden-close \"*/\" ./test-file.java Switch compilers (temporarily unavailable) \u00b6 CCom has multiple compiler frontend implementations, which have different strengths and weaknesses. The default compiler backend is called cpp . To switch between compiler implementations, you can use --compiler / -c . Valid values are cpp and java . Benchmarking \u00b6 CCom comes with a built-in benchmark mode to test the performance of compiling different files in combination with different compiler backends. To run a benchmark for an input file with input data, you can use --benchmark / -b and specify a number of runs. E.g.: ccom --data ./test-data.json --benchmark 500 --out-file ./output.yml ./input-file.yml CCom will show you how long every run takes as well as the total and average runtime. Silent mode \u00b6 By default, CCom prints some information about the compile status to the console. If you're using CCom for your purpose, you might not want such compile status outputs. To disable all CCom outputs, except the compile result output, you can use the --silent or -s flag for the cli. Force flag \u00b6 CCom warns you per default if the output file already exists. To disable that warning, you can simply use the --force or -f flag for the cli.","title":"Usage"},{"location":"usage/#general-usage","text":"In general, you call the cli like so: ccom [options] <input> For example a call could look like this: ccom --data ./data-file.json --out-file ./output-file.yml ./input-file.yml For customization, you have following cli options: Option Shortcut Description Default --benchmark <number> -b <no> Execute compiler benchmarks. n is the number of benchmark runs 0 --compiler <name> (temporarily unavailable) -c <name> Can be used to switch the compiler backend. Valid inputs are cpp and java \"cpp\" --data <data> -d <data> JSON string or path to JSON file, which holds the evaluation work data {} --lang <lang> -l <lang> File format / programming language (e.g. yaml , java , html , ...) \"auto\"* --mode-single -m Set input mode to single statement list - --out-file <path> -o <path> Path to output file. If you omit this flag, the output will be printed to the console - --silent -s Only print raw compiler output and no debug output - --force -f Ignore safety checks. Warning: This could cause demage - --line-comment-iden <string> -lci <string> Specifies the line comment char(s) of your data format \"#\" --block-comment-iden-open <string> -bcio <string> Specifies the opening block comment char(s) of your data format \"\" --block-comment-iden-close <string> -bcic <string> Specifies the closing block comment char(s) of your data format \"\"","title":"General usage"},{"location":"usage/#file-mode-vs-single-mode","text":"CCom supports two modes of usage: The input file / string with conditional sections to an output file / string The single mode, which can evaluate a single statement list to a boolean Here is an example for an input file, in this case a YAML file: build : ${{SPRING_MAVEN_SOURCE_DIRECTORY}} restart : always networks : #? if service.frontend[1].preselected == false { # - frontend-backend #? } ports : - ${{SPRING_MAVEN_PORT}}:8080 env_file : #? if service.frontend[0] contains name != \"spring-maven\" { # - environment.env #? } Here is an example for an input for a single statement list: has this.is.a.test.key | this.is contains a.test.key == \"value\" | this.is.test >= 42 The cli defaults the mode to the input file, however you can switch to single mode by using the --mode-single or -m flag for the cli.","title":"File mode vs single mode"},{"location":"usage/#data-path-vs-data-string","text":"CCom accepts data in the JSON format only, but you can give it to the cli in one of two different forms: - Data file: If you have the json input data in form of a file, you can set --data / -d to the relative or absolute path to the data file. CCom will then load the file from this path. - Data string: If you do not have the data in form of a file, you might want CCom to consume a string. For that you can set --data / -d to a JSON string (e.g.: {\"test-attribute\": \"test-value\"} )","title":"Data path vs data string"},{"location":"usage/#language","text":"As CCom does not know the content type of your input file, you sometimes have to specify the files language or the comment identifiers. CCom is smart enough to recognize the language for some file extensions, but if the file contents does not match the extension, you can set the language manually via --lang / -l . This should work out for following languages: Language Language Language Language Language Assembly C C++ Dart Dockerfile Elexir Go Groovy Haskell HTML Java JavaScript Julia Kotlin Lua Pascal Perl PHP Powershell Python R Ruby Rust Spice SQL Swift TypeScript XML YAML more to come ... If you did not find your language in the list, you can set the comment identifiers by hand. Here is an example: ccom --data ./test-data.json --line-comment-iden \"//\" --block-comment-iden-open \"/*\" --block-comment-iden-close \"*/\" ./test-file.java","title":"Language"},{"location":"usage/#switch-compilers-temporarily-unavailable","text":"CCom has multiple compiler frontend implementations, which have different strengths and weaknesses. The default compiler backend is called cpp . To switch between compiler implementations, you can use --compiler / -c . Valid values are cpp and java .","title":"Switch compilers (temporarily unavailable)"},{"location":"usage/#benchmarking","text":"CCom comes with a built-in benchmark mode to test the performance of compiling different files in combination with different compiler backends. To run a benchmark for an input file with input data, you can use --benchmark / -b and specify a number of runs. E.g.: ccom --data ./test-data.json --benchmark 500 --out-file ./output.yml ./input-file.yml CCom will show you how long every run takes as well as the total and average runtime.","title":"Benchmarking"},{"location":"usage/#silent-mode","text":"By default, CCom prints some information about the compile status to the console. If you're using CCom for your purpose, you might not want such compile status outputs. To disable all CCom outputs, except the compile result output, you can use the --silent or -s flag for the cli.","title":"Silent mode"},{"location":"usage/#force-flag","text":"CCom warns you per default if the output file already exists. To disable that warning, you can simply use the --force or -f flag for the cli.","title":"Force flag"},{"location":"install/docker/","text":"Download \u00b6 You don't have to pull the image first. You also can skip this step. Docker Hub docker pull chillibits/ccom GitHub Container Registry docker pull ghcr.io/chillibits/ccom Use \u00b6 Linux - Docker Hub docker run --rm -it -v $( pwd ) :/ccom/out chillibits/ccom Linux - GHCR docker run --rm -it -v $( pwd ) :/ccom/out ghcr.io/chillibits/ccom Windows - Docker Hub docker run --rm -it -v ${ pwd } :/ccom/out chillibits/ccom Windows - GHCR docker run --rm -it -v ${ pwd } :/ccom/out ghcr.io/chillibits/ccom Customize \u00b6 Custom output path \u00b6 You can use another output path by replacing $(pwd) with a custom path. Example docker run --rm -it -v ./project:/ccom/out chillibits/ccom","title":"Use with Docker"},{"location":"install/docker/#download","text":"You don't have to pull the image first. You also can skip this step. Docker Hub docker pull chillibits/ccom GitHub Container Registry docker pull ghcr.io/chillibits/ccom","title":"Download"},{"location":"install/docker/#use","text":"Linux - Docker Hub docker run --rm -it -v $( pwd ) :/ccom/out chillibits/ccom Linux - GHCR docker run --rm -it -v $( pwd ) :/ccom/out ghcr.io/chillibits/ccom Windows - Docker Hub docker run --rm -it -v ${ pwd } :/ccom/out chillibits/ccom Windows - GHCR docker run --rm -it -v ${ pwd } :/ccom/out ghcr.io/chillibits/ccom","title":"Use"},{"location":"install/docker/#customize","text":"","title":"Customize"},{"location":"install/docker/#custom-output-path","text":"You can use another output path by replacing $(pwd) with a custom path. Example docker run --rm -it -v ./project:/ccom/out chillibits/ccom","title":"Custom output path"},{"location":"install/linux/","text":"Install from repository \u00b6 Debian/Ubuntu To install CCom on Debian or Ubuntu, execute the following commands in your terminal: sudo apt-get install ca-certificates curl -fsSL https://server.chillibits.com/files/repo/gpg | sudo apt-key add - sudo add-apt-repository \"deb https://repo.chillibits.com/ $( lsb_release -is | awk '{print tolower($0)}' ) - $( lsb_release -cs ) $( lsb_release -cs ) main\" sudo apt-get update sudo apt-get install ccom Fedora To install CCom on Fedora, execute the following commands in your terminal: sudo dnf -y install dnf-plugins-core sudo dnf config-manager --add-repo https://server.chillibits.com/files/repo/fedora.repo sudo dnf install ccom CentOS To install CCom on CentOS, execute the following commands in your terminal: sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://server.chillibits.com/files/repo/centos.repo sudo yum install ccom Raspbian To install CCom on Raspbian, execute the following commands in your terminal: sudo apt-get install ca-certificates curl -fsSL https://server.chillibits.com/files/repo/gpg | sudo apt-key add - sudo echo \"deb [arch=armhf] https://repo.chillibits.com/ $( lsb_release -is | awk '{print tolower($0)}' ) - $( lsb_release -cs ) $( lsb_release -cs ) main\" > /etc/apt/sources.list.d/chillibits.list sudo apt-get update sudo apt-get install ccom Warning The support for Raspbian is at the experimental stage. Please File a bug ticket on GitHub if there occurs a bug for you while installing. Install from package file \u00b6 You can also install CCom from a Linux package. Debian/Ubuntu/Raspbian Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: dpkg -i <deb-file-name> Fedora/CentOS Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: rpm -U <rpm-file-name> Alpine Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: apk add --allow-untrusted <apk-file-name> Use \u00b6 ccom [ options ] <input>","title":"Install on Linux"},{"location":"install/linux/#install-from-repository","text":"Debian/Ubuntu To install CCom on Debian or Ubuntu, execute the following commands in your terminal: sudo apt-get install ca-certificates curl -fsSL https://server.chillibits.com/files/repo/gpg | sudo apt-key add - sudo add-apt-repository \"deb https://repo.chillibits.com/ $( lsb_release -is | awk '{print tolower($0)}' ) - $( lsb_release -cs ) $( lsb_release -cs ) main\" sudo apt-get update sudo apt-get install ccom Fedora To install CCom on Fedora, execute the following commands in your terminal: sudo dnf -y install dnf-plugins-core sudo dnf config-manager --add-repo https://server.chillibits.com/files/repo/fedora.repo sudo dnf install ccom CentOS To install CCom on CentOS, execute the following commands in your terminal: sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://server.chillibits.com/files/repo/centos.repo sudo yum install ccom Raspbian To install CCom on Raspbian, execute the following commands in your terminal: sudo apt-get install ca-certificates curl -fsSL https://server.chillibits.com/files/repo/gpg | sudo apt-key add - sudo echo \"deb [arch=armhf] https://repo.chillibits.com/ $( lsb_release -is | awk '{print tolower($0)}' ) - $( lsb_release -cs ) $( lsb_release -cs ) main\" > /etc/apt/sources.list.d/chillibits.list sudo apt-get update sudo apt-get install ccom Warning The support for Raspbian is at the experimental stage. Please File a bug ticket on GitHub if there occurs a bug for you while installing.","title":"Install from repository"},{"location":"install/linux/#install-from-package-file","text":"You can also install CCom from a Linux package. Debian/Ubuntu/Raspbian Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: dpkg -i <deb-file-name> Fedora/CentOS Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: rpm -U <rpm-file-name> Alpine Download amd64 Download arm64 Download armv5 Download armv6 Download armv7 To install it, execute the following command: apk add --allow-untrusted <apk-file-name>","title":"Install from package file"},{"location":"install/linux/#use","text":"ccom [ options ] <input>","title":"Use"},{"location":"install/source/","text":"Setup \u00b6 Before being able to compile the source code, you first have to download it from GitHub and install Golang (if you don't have it already). Depending on which compiler executable you want to use, you also have to either install Java JDK15 or a common C++ compiler and CMake. Clone source from GitHub \u00b6 git clone https://github.com/compose-generator/ccom.git cd ccom Install Go \u00b6 For compiling CCom from source, you need to have Go 1.16 or higher installed on your system. Please refer to the official guide on how to install Go. Build from source \u00b6 If you want to build the executable, you can use the build.sh for Linux or the build.bat file for Windows: Linux ./build.sh Windows . \\b uild.bat The executables will end up in the bin subfolder. Install from source \u00b6 If you don't care about the executable and you just want to use CCom, you can use the install.sh for Linux or the install.bat for Windows. This will install the executable to a path, located in the PATH, so your OS can find it and makes it available as a command: Linux ./install.sh Windows . \\i nstall.bat Use \u00b6 ccom [ options ] <input>","title":"Build or install from source"},{"location":"install/source/#setup","text":"Before being able to compile the source code, you first have to download it from GitHub and install Golang (if you don't have it already). Depending on which compiler executable you want to use, you also have to either install Java JDK15 or a common C++ compiler and CMake.","title":"Setup"},{"location":"install/source/#clone-source-from-github","text":"git clone https://github.com/compose-generator/ccom.git cd ccom","title":"Clone source from GitHub"},{"location":"install/source/#install-go","text":"For compiling CCom from source, you need to have Go 1.16 or higher installed on your system. Please refer to the official guide on how to install Go.","title":"Install Go"},{"location":"install/source/#build-from-source","text":"If you want to build the executable, you can use the build.sh for Linux or the build.bat file for Windows: Linux ./build.sh Windows . \\b uild.bat The executables will end up in the bin subfolder.","title":"Build from source"},{"location":"install/source/#install-from-source","text":"If you don't care about the executable and you just want to use CCom, you can use the install.sh for Linux or the install.bat for Windows. This will install the executable to a path, located in the PATH, so your OS can find it and makes it available as a command: Linux ./install.sh Windows . \\i nstall.bat","title":"Install from source"},{"location":"install/source/#use","text":"ccom [ options ] <input>","title":"Use"},{"location":"install/windows/","text":"Install via winget cli \u00b6 CCom gets distributed for Windows via the new Windows package manager CLI called winget . As soon as the Windows package manager is installed on your Windows machine, you can open up powershell and execute the following installation command: winget install ChilliBits.CCom After installing CCom, you should be able to run it. If not, please restart your powershell instance to make it reload the available commands. Install manually via installer \u00b6 Download 64bit Download 32bit Note: It is possible that you see an error notification by your anti-virus software complaining about CCom being a potentially dangerous application. This can happen if the latest version was released very recently and too few people downloaded it yet. If you want to validate the file signature, you can visit this GitHub repo , select your version and open the file ChilliBits.CCom.installer.yaml . There you can find the SHA256 signatures for the x64 and x86 exe installers. Use \u00b6 ccom [ options ] <input> *[CLI]: Command Line Interface","title":"Install on Windows"},{"location":"install/windows/#install-via-winget-cli","text":"CCom gets distributed for Windows via the new Windows package manager CLI called winget . As soon as the Windows package manager is installed on your Windows machine, you can open up powershell and execute the following installation command: winget install ChilliBits.CCom After installing CCom, you should be able to run it. If not, please restart your powershell instance to make it reload the available commands.","title":"Install via winget cli"},{"location":"install/windows/#install-manually-via-installer","text":"Download 64bit Download 32bit Note: It is possible that you see an error notification by your anti-virus software complaining about CCom being a potentially dangerous application. This can happen if the latest version was released very recently and too few people downloaded it yet. If you want to validate the file signature, you can visit this GitHub repo , select your version and open the file ChilliBits.CCom.installer.yaml . There you can find the SHA256 signatures for the x64 and x86 exe installers.","title":"Install manually via installer"},{"location":"install/windows/#use","text":"ccom [ options ] <input> *[CLI]: Command Line Interface","title":"Use"}]}